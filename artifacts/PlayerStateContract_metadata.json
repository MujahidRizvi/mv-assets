{
	"compiler": {
		"version": "0.8.14+commit.80d49f37"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "playerId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "ipfsHash",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "playerAddress",
						"type": "address"
					}
				],
				"name": "AddedNewPlayer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "whitelistedAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "addedBy",
						"type": "address"
					}
				],
				"name": "AddedWhitelistAddress",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "whitelistedAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "addedBy",
						"type": "address"
					}
				],
				"name": "RemovedWhitelistAddress",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "baseURI",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "addedBy",
						"type": "address"
					}
				],
				"name": "UpdatedBaseURI",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "playerAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "ipfsHash",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "playerScore",
						"type": "uint256"
					}
				],
				"name": "UpdatedPlayerState",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "whitelistAddress",
						"type": "address"
					}
				],
				"name": "addWhitelistedAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "baseURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllPlayers",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "playerAddress",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "ipfsHash",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "playerScore",
								"type": "uint256"
							}
						],
						"internalType": "struct PlayerStateContract.PlayersStateReturn[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "playerAddress",
						"type": "address"
					}
				],
				"name": "getPlayerInfo",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "ipfsHash",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "playerScore",
								"type": "uint256"
							}
						],
						"internalType": "struct PlayerStateContract.Player",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "playerAddress",
						"type": "address"
					}
				],
				"name": "getPlayerIpfsHash",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "playerAddresses",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "playerCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "playerStates",
				"outputs": [
					{
						"internalType": "string",
						"name": "ipfsHash",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "playerScore",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "whitelistAddress",
						"type": "address"
					}
				],
				"name": "removeWhitelistedAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_baseURI",
						"type": "string"
					}
				],
				"name": "updateBaseURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "ipfsHash",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "playerAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "playerScore",
						"type": "uint256"
					}
				],
				"name": "updatePlayerInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "playerId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "whitelistedAddresses",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addWhitelistedAddress(address)": {
					"details": "addWhitelistedAddress is used to add address in whitelist mapping. Requirement: - This function can only called by owner of contract",
					"params": {
						"whitelistAddress": "- New whitelist address Emits a {AddedWhitelistAddress} event."
					}
				},
				"getAllPlayers()": {
					"details": "getAllPlayer is used to get information of All players (Hashes,Score) in PlayerStateContract.",
					"returns": {
						"_0": "PlayerDetails Tuple."
					}
				},
				"getPlayerInfo(address)": {
					"details": "getPlayerInfo is used to get information of player in PlayerStateContract.",
					"params": {
						"playerAddress": "- ID of player"
					},
					"returns": {
						"_0": "Player Tuple."
					}
				},
				"getPlayerIpfsHash(address)": {
					"details": "getPlayerHash is used to get information of player in PlayerStateContract.",
					"params": {
						"playerAddress": "- ID of player"
					},
					"returns": {
						"_0": "Player Tuple."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removeWhitelistedAddress(address)": {
					"details": "removeWhitelistedAddress is used to remove address from whitelist mapping. Requirement: - This function can only called by owner of contract",
					"params": {
						"whitelistAddress": "- Remove whitelist address Emits a {RemovedWhitelistAddress} event."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updateBaseURI(string)": {
					"details": "updateBaseURI is used to update BaseURI. Requirement: - This function can only called by owner of contract",
					"params": {
						"_baseURI": "- New baseURI Emits a {UpdatedBaseURI} event."
					}
				},
				"updatePlayerInfo(string,address,uint256)": {
					"details": "updatePlayerInfo is used to add new player in PlayerStateContract. Requirement: - This function can only called by whitelisted Addresses",
					"params": {
						"ipfsHash": "- IPFS URI of player",
						"playerAddress": "- Address of player",
						"playerScore": "- Score of player Emits a {AddedNewPlayer} event when player address is new. Emits a {UpdatedPlayerState} event when player address already exists."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/FinalPlayerContract.sol": "PlayerStateContract"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981",
				"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935",
			"license": "MIT",
			"urls": [
				"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2",
				"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"contracts/FinalPlayerContract.sol": {
			"keccak256": "0x04105dea3e966bfc9dab943ad101d83eadbf03f11fead20879a2c6542091aeee",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://27b2ca203cb65cda8eb2427127d340df3e79e7790af16ea73ab599c5937a8f55",
				"dweb:/ipfs/Qmdz8r6XByR1DxnGDkYc17YAR4TECA8b4YNhnyhYsgnRjj"
			]
		}
	},
	"version": 1
}
